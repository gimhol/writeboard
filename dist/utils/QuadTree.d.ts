import { ITree } from "./ITree";
import { IRect, Rect } from "./Rect";
export declare type QuadTreeOptions<T = any> = {
    rect: IRect;
    getItemRect: (item: T) => IRect;
    maxItems?: number;
    getTree?: (item: T) => QuadTree<T> | undefined;
    onTreeChanged?: (item: T, from: QuadTree<T>, to: QuadTree<T>) => void;
};
export declare class QuadTree<T = any> implements ITree<T> {
    private _items;
    private _child0;
    private _child1;
    private _child2;
    private _child3;
    private _childRect0;
    private _childRect1;
    private _childRect2;
    private _childRect3;
    private _itemCount;
    private _rect;
    private _opts;
    private _level;
    private _parent;
    constructor(opts: QuadTreeOptions<T>);
    get children(): (QuadTree<T> | undefined)[];
    get maxItems(): number;
    get parent(): QuadTree<T> | undefined;
    get level(): number;
    get itemCount(): number;
    get rect(): Rect;
    get items(): T[];
    get child0(): QuadTree<T> | undefined;
    get child1(): QuadTree<T> | undefined;
    get child2(): QuadTree<T> | undefined;
    get child3(): QuadTree<T> | undefined;
    private get genChild0();
    private get genChild1();
    private get genChild2();
    private get genChild3();
    private get childRect0();
    private get childRect1();
    private get childRect2();
    private get childRect3();
    split(): void;
    insert(item: T): QuadTree<T>;
    removeOnlyUnderMe(item: T): boolean;
    remove(item: T): boolean;
    merge(): void;
}
